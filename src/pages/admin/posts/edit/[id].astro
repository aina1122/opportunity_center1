---
import AdminLayout from '../../../../components/admin/AdminLayout.astro';
import { Editor } from '@tinymce/tinymce-react';
import db from '../../../../db/database';
import { getCurrentUser } from '../../../../utils/auth';
import { calculateReadingTime, slugify } from '../../../../utils/formatters';

const { id } = Astro.params;

// Get current user
const user = await getCurrentUser(Astro);

// Fetch post
const post: any = await db.query('SELECT * FROM posts WHERE id = ?', [id]);

if (!post || post.length === 0) {
  return Astro.redirect('/admin/posts');
}

// Fetch categories for the dropdown
const categories: any = await db.query('SELECT id, name FROM categories ORDER BY name');

// Handle form submission
if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const title = formData.get('title')?.toString() || '';
    const content = formData.get('content')?.toString() || '';
    const excerpt = formData.get('excerpt')?.toString() || '';
    const categoryId = parseInt(formData.get('category_id')?.toString() || '0');
    const status = formData.get('status')?.toString() || 'draft';
    const featuredImage = formData.get('featured_image')?.toString() || '';
    
    // Generate slug from title if it's different
    const slug = title !== post[0].title ? slugify(title) : post[0].slug;
    
    // Calculate reading time
    const readingTime = calculateReadingTime(content);
    
    // Prepare post data
    const postData = {
      title,
      slug,
      content,
      excerpt,
      category_id: categoryId || null,
      status,
      featured_image: featuredImage,
      reading_time: readingTime,
      published_at: status === 'published' && post[0].status !== 'published' ? new Date() : post[0].published_at
    };
    
    // Update post
    await db.update('posts', parseInt(id), postData);
    
    return Astro.redirect('/admin/posts');
  } catch (error) {
    console.error('Error updating post:', error);
  }
}
---

<AdminLayout title="Edit Post">
  <form method="POST" class="space-y-6">
    <div class="bg-white rounded-lg shadow-sm p-6">
      <!-- Title -->
      <div class="mb-6">
        <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
        <input
          type="text"
          id="title"
          name="title"
          value={post[0].title}
          required
          class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
        />
      </div>
      
      <!-- Featured Image -->
      <div class="mb-6">
        <label for="featured_image" class="block text-sm font-medium text-gray-700">Featured Image URL</label>
        <input
          type="url"
          id="featured_image"
          name="featured_image"
          value={post[0].featured_image}
          class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
        />
      </div>
      
      <!-- Category -->
      <div class="mb-6">
        <label for="category_id" class="block text-sm font-medium text-gray-700">Category</label>
        <select
          id="category_id"
          name="category_id"
          class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
        >
          <option value="">Select a category</option>
          {categories.map((category: any) => (
            <option value={category.id} selected={category.id === post[0].category_id}>
              {category.name}
            </option>
          ))}
        </select>
      </div>
      
      <!-- Excerpt -->
      <div class="mb-6">
        <label for="excerpt" class="block text-sm font-medium text-gray-700">Excerpt</label>
        <textarea
          id="excerpt"
          name="excerpt"
          rows="3"
          class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
        >{post[0].excerpt}</textarea>
      </div>
      
      <!-- Content -->
      <div class="mb-6">
        <label for="content" class="block text-sm font-medium text-gray-700 mb-2">Content</label>
        <textarea
          id="content"
          name="content"
          class="hidden"
        >{post[0].content}</textarea>
        <div id="editor"></div>
      </div>
      
      <!-- Status -->
      <div class="mb-6">
        <label for="status" class="block text-sm font-medium text-gray-700">Status</label>
        <select
          id="status"
          name="status"
          class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
        >
          <option value="draft" selected={post[0].status === 'draft'}>Draft</option>
          <option value="published" selected={post[0].status === 'published'}>Published</option>
        </select>
      </div>
      
      <!-- Actions -->
      <div class="flex justify-end space-x-3">
        <a
          href="/admin/posts"
          class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
        >
          Cancel
        </a>
        <button
          type="submit"
          class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
        >
          Update Post
        </button>
      </div>
    </div>
  </form>
</AdminLayout>

<script>
  import { Editor } from '@tinymce/tinymce-react';
  
  // Initialize TinyMCE editor
  const editor = new Editor({
    selector: '#editor',
    plugins: 'link image code table lists',
    toolbar: 'undo redo | formatselect | bold italic | alignleft aligncenter alignright | bullist numlist outdent indent | link image | code',
    height: 500,
    setup: (editor) => {
      // Set initial content
      editor.setContent(document.getElementById('content').value);
      
      // Update hidden textarea with content when editor changes
      editor.on('change', () => {
        const content = editor.getContent();
        document.getElementById('content').value = content;
      });
    }
  });
</script>