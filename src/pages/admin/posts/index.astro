---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { getAll, getByField } from '../../../lib/db.js';
import { formatDate } from '../../../lib/utils.js';

// Get all posts with pagination
const page = parseInt(Astro.url.searchParams.get('page') || '1');
const limit = 10;
const offset = (page - 1) * limit;

const posts = await getAll('posts', 'created_at', 'DESC', limit, offset);

// Get authors and categories
const authorIds = [...new Set(posts.map(post => post.author_id))];
const categoryIds = [...new Set(posts.map(post => post.category_id))];

const authors = new Map();
const categories = new Map();

for (const id of authorIds) {
  const author = await getByField('users', 'id', id);
  if (author) authors.set(id, author);
}

for (const id of categoryIds) {
  const category = await getByField('categories', 'id', id);
  if (category) categories.set(id, category);
}
---

<AdminLayout>
  <div class="bg-white rounded-lg shadow-sm p-6">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-heading font-bold">Posts</h1>
      <a 
        href="/admin/posts/new" 
        class="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
      >
        Add New Post
      </a>
    </div>

    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-neutral-200">
        <thead>
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider">Title</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider">Author</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider">Category</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider">Status</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider">Date</th>
            <th class="px-6 py-3 text-right text-xs font-medium text-neutral-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-neutral-200">
          {posts.map((post) => (
            <tr>
              <td class="px-6 py-4">
                <div class="flex items-center">
                  {post.featured_image && (
                    <img 
                      src={post.featured_image} 
                      alt={post.title}
                      class="h-10 w-10 object-cover rounded-md mr-3"
                    />
                  )}
                  <div>
                    <div class="font-medium text-neutral-900">{post.title}</div>
                    <div class="text-sm text-neutral-500">{post.slug}</div>
                  </div>
                </div>
              </td>
              <td class="px-6 py-4 text-sm text-neutral-500">
                {authors.get(post.author_id)?.name || 'Unknown'}
              </td>
              <td class="px-6 py-4 text-sm text-neutral-500">
                {categories.get(post.category_id)?.name || 'Uncategorized'}
              </td>
              <td class="px-6 py-4">
                <span class={`px-2 py-1 text-xs font-medium rounded-full ${
                  post.status === 'published' 
                    ? 'bg-green-100 text-green-800'
                    : 'bg-yellow-100 text-yellow-800'
                }`}>
                  {post.status}
                </span>
              </td>
              <td class="px-6 py-4 text-sm text-neutral-500">
                {formatDate(post.created_at)}
              </td>
              <td class="px-6 py-4 text-right text-sm font-medium">
                <a 
                  href={`/admin/posts/${post.id}/edit`}
                  class="text-primary-600 hover:text-primary-900 mr-3"
                >
                  Edit
                </a>
                <button 
                  data-post-id={post.id}
                  class="text-red-600 hover:text-red-900 delete-post"
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>

  <script>
    // Handle post deletion
    document.querySelectorAll('.delete-post').forEach(button => {
      button.addEventListener('click', async (e) => {
        const postId = e.target.dataset.postId;
        
        if (confirm('Are you sure you want to delete this post?')) {
          try {
            const response = await fetch(`/api/posts/${postId}`, {
              method: 'DELETE',
              headers: {
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
              }
            });
            
            if (response.ok) {
              window.location.reload();
            } else {
              alert('Failed to delete post');
            }
          } catch (error) {
            console.error('Error deleting post:', error);
            alert('An error occurred while deleting the post');
          }
        }
      });
    });
  </script>
</AdminLayout>