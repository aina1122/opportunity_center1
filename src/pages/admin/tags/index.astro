---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { getAll } from '../../../lib/db.js';

const tags = await getAll('tags');
---

<AdminLayout>
  <div class="bg-white rounded-lg shadow-sm p-6">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-heading font-bold">Tags</h1>
      <button 
        id="add-tag"
        class="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
      >
        Add New Tag
      </button>
    </div>

    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-neutral-200">
        <thead>
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider">Name</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider">Slug</th>
            <th class="px-6 py-3 text-right text-xs font-medium text-neutral-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-neutral-200">
          {tags.map((tag) => (
            <tr>
              <td class="px-6 py-4 text-sm font-medium text-neutral-900">{tag.name}</td>
              <td class="px-6 py-4 text-sm text-neutral-500">{tag.slug}</td>
              <td class="px-6 py-4 text-right text-sm font-medium">
                <button 
                  class="text-primary-600 hover:text-primary-900 mr-3 edit-tag"
                  data-tag={JSON.stringify(tag)}
                >
                  Edit
                </button>
                <button 
                  class="text-red-600 hover:text-red-900 delete-tag"
                  data-tag-id={tag.id}
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>

  <!-- Tag Modal -->
  <div id="tag-modal" class="hidden fixed inset-0 bg-neutral-500 bg-opacity-75 flex items-center justify-center">
    <div class="bg-white rounded-lg p-6 max-w-md w-full">
      <h2 id="modal-title" class="text-xl font-heading font-bold mb-4">Add New Tag</h2>
      
      <form id="tag-form" class="space-y-4">
        <input type="hidden" id="tag-id">
        
        <div>
          <label for="name" class="block text-sm font-medium text-neutral-700">Name</label>
          <input 
            type="text" 
            id="name" 
            name="name" 
            required
            class="mt-1 block w-full rounded-md border-neutral-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
          />
        </div>

        <div class="flex justify-end space-x-4 mt-6">
          <button 
            type="button"
            id="close-modal"
            class="px-4 py-2 border border-neutral-300 rounded-md shadow-sm text-sm font-medium text-neutral-700 bg-white hover:bg-neutral-50"
          >
            Cancel
          </button>
          <button 
            type="submit"
            class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700"
          >
            Save
          </button>
        </div>
      </form>
    </div>
  </div>

  <script>
    const modal = document.getElementById('tag-modal');
    const form = document.getElementById('tag-form');
    const addButton = document.getElementById('add-tag');
    const closeButton = document.getElementById('close-modal');
    const modalTitle = document.getElementById('modal-title');

    // Show modal
    function showModal(title = 'Add New Tag') {
      modalTitle.textContent = title;
      modal.classList.remove('hidden');
    }

    // Hide modal
    function hideModal() {
      modal.classList.add('hidden');
      form.reset();
      document.getElementById('tag-id').value = '';
    }

    // Add tag button click
    addButton.addEventListener('click', () => {
      showModal();
    });

    // Close modal button click
    closeButton.addEventListener('click', hideModal);

    // Edit tag buttons
    document.querySelectorAll('.edit-tag').forEach(button => {
      button.addEventListener('click', () => {
        const tag = JSON.parse(button.dataset.tag);
        document.getElementById('tag-id').value = tag.id;
        document.getElementById('name').value = tag.name;
        showModal('Edit Tag');
      });
    });

    // Delete tag buttons
    document.querySelectorAll('.delete-tag').forEach(button => {
      button.addEventListener('click', async () => {
        if (confirm('Are you sure you want to delete this tag?')) {
          const tagId = button.dataset.tagId;
          try {
            const response = await fetch(`/api/tags/${tagId}`, {
              method: 'DELETE',
              headers: {
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
              }
            });
            
            if (response.ok) {
              window.location.reload();
            } else {
              alert('Failed to delete tag');
            }
          } catch (error) {
            console.error('Error deleting tag:', error);
            alert('An error occurred while deleting the tag');
          }
        }
      });
    });

    // Form submission
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const tagId = document.getElementById('tag-id').value;
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      
      try {
        const response = await fetch(`/api/tags${tagId ? `/${tagId}` : ''}`, {
          method: tagId ? 'PUT' : 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          },
          body: JSON.stringify(data)
        });
        
        if (response.ok) {
          window.location.reload();
        } else {
          alert('Failed to save tag');
        }
      } catch (error) {
        console.error('Error saving tag:', error);
        alert('An error occurred while saving the tag');
      }
    });

    // Close modal when clicking outside
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        hideModal();
      }
    });
  </script>
</AdminLayout>