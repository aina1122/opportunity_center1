---
import AdminLayout from '../../../layouts/AdminLayout.astro';
---

<AdminLayout>
  <div class="bg-white rounded-lg shadow-sm p-6">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-heading font-bold">Media Library</h1>
      <button 
        id="upload-media"
        class="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"
      >
        Upload Media
      </button>
    </div>

    <div id="media-grid" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
      <!-- Media items will be loaded here -->
    </div>

    <div id="upload-progress" class="hidden mt-4">
      <div class="w-full bg-neutral-200 rounded-full h-2.5">
        <div class="bg-primary-600 h-2.5 rounded-full" style="width: 0%"></div>
      </div>
    </div>
  </div>

  <!-- Upload Modal -->
  <div id="upload-modal" class="hidden fixed inset-0 bg-neutral-500 bg-opacity-75 flex items-center justify-center">
    <div class="bg-white rounded-lg p-6 max-w-md w-full">
      <h2 class="text-xl font-heading font-bold mb-4">Upload Media</h2>
      
      <form id="upload-form" class="space-y-4">
        <div class="border-2 border-dashed border-neutral-300 rounded-lg p-6 text-center">
          <input 
            type="file" 
            id="file-input" 
            multiple 
            accept="image/*"
            class="hidden"
          />
          <label 
            for="file-input"
            class="cursor-pointer flex flex-col items-center justify-center"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-neutral-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
            </svg>
            <p class="mt-2 text-sm text-neutral-600">
              Drag and drop files here or click to browse
            </p>
            <p class="text-xs text-neutral-500 mt-1">
              Supported formats: JPG, PNG, GIF
            </p>
          </label>
        </div>

        <div class="flex justify-end space-x-4">
          <button 
            type="button"
            id="close-modal"
            class="px-4 py-2 border border-neutral-300 rounded-md shadow-sm text-sm font-medium text-neutral-700 bg-white hover:bg-neutral-50"
          >
            Cancel
          </button>
          <button 
            type="submit"
            class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700"
          >
            Upload
          </button>
        </div>
      </form>
    </div>
  </div>

  <script>
    const modal = document.getElementById('upload-modal');
    const uploadButton = document.getElementById('upload-media');
    const closeButton = document.getElementById('close-modal');
    const fileInput = document.getElementById('file-input');
    const uploadForm = document.getElementById('upload-form');
    const mediaGrid = document.getElementById('media-grid');
    const progressBar = document.getElementById('upload-progress');

    // Show modal
    function showModal() {
      modal.classList.remove('hidden');
    }

    // Hide modal
    function hideModal() {
      modal.classList.add('hidden');
      fileInput.value = '';
    }

    // Upload button click
    uploadButton.addEventListener('click', showModal);

    // Close modal button click
    closeButton.addEventListener('click', hideModal);

    // Handle file selection
    fileInput.addEventListener('change', () => {
      // You can add preview functionality here
    });

    // Handle form submission
    uploadForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const files = fileInput.files;
      if (!files.length) return;
      
      progressBar.classList.remove('hidden');
      const progressBarFill = progressBar.querySelector('div');
      
      for (let i = 0; i < files.length; i++) {
        const formData = new FormData();
        formData.append('file', files[i]);
        
        try {
          const response = await fetch('/api/media/upload', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            },
            body: formData
          });
          
          if (response.ok) {
            const progress = ((i + 1) / files.length) * 100;
            progressBarFill.style.width = `${progress}%`;
          }
        } catch (error) {
          console.error('Error uploading file:', error);
        }
      }
      
      hideModal();
      loadMedia();
      progressBar.classList.add('hidden');
    });

    // Load media
    async function loadMedia() {
      try {
        const response = await fetch('/api/media', {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });
        
        if (response.ok) {
          const media = await response.json();
          mediaGrid.innerHTML = media.map(item => `
            <div class="relative group">
              <img 
                src="${item.url}" 
                alt="${item.name}"
                class="w-full h-40 object-cover rounded-lg"
              />
              <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center space-x-2">
                <button 
                  class="p-2 bg-white rounded-full text-neutral-700 hover:text-primary-600"
                  onclick="copyUrl('${item.url}')"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                  </svg>
                </button>
                <button 
                  class="p-2 bg-white rounded-full text-neutral-700 hover:text-red-600"
                  onclick="deleteMedia('${item.id}')"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                </button>
              </div>
            </div>
          `).join('');
        }
      } catch (error) {
        console.error('Error loading media:', error);
      }
    }

    // Copy URL to clipboard
    function copyUrl(url) {
      navigator.clipboard.writeText(url);
      alert('URL copied to clipboard!');
    }

    // Delete media
    async function deleteMedia(id) {
      if (confirm('Are you sure you want to delete this media?')) {
        try {
          const response = await fetch(`/api/media/${id}`, {
            method: 'DELETE',
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            }
          });
          
          if (response.ok) {
            loadMedia();
          }
        } catch (error) {
          console.error('Error deleting media:', error);
        }
      }
    }

    // Load media on page load
    loadMedia();

    // Handle drag and drop
    const dropZone = document.querySelector('.border-dashed');
    
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
      dropZone.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, unhighlight, false);
    });

    function highlight(e) {
      dropZone.classList.add('border-primary-500');
    }

    function unhighlight(e) {
      dropZone.classList.remove('border-primary-500');
    }

    dropZone.addEventListener('drop', handleDrop, false);

    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      fileInput.files = files;
    }
  </script>
</AdminLayout>