---
import AdminLayout from '../../../components/admin/AdminLayout.astro';
import db from '../../../db/database';
import { formatDateTime } from '../../../utils/formatters';

// Fetch categories with post counts
const categories: any = await db.query(`
  SELECT c.*,
         COUNT(p.id) as post_count
  FROM categories c
  LEFT JOIN posts p ON c.id = p.category_id
  GROUP BY c.id
  ORDER BY c.name
`);
---

<AdminLayout title="Manage Categories">
  <!-- Header Actions -->
  <div class="mb-6 flex justify-between items-center">
    <h2 class="text-lg font-medium text-gray-900">All Categories</h2>
    <button
      type="button"
      class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
      id="newCategoryButton"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
      </svg>
      New Category
    </button>
  </div>

  <!-- Categories Table -->
  <div class="bg-white shadow-sm rounded-lg overflow-hidden">
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-gray-50">
        <tr>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Name
          </th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Slug
          </th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Posts
          </th>
          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            Created
          </th>
          <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
            Actions
          </th>
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200">
        {categories.map((category: any) => (
          <tr>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm font-medium text-gray-900">{category.name}</div>
              <div class="text-sm text-gray-500">{category.description}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-900">{category.slug}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm text-gray-900">{category.post_count}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
              {formatDateTime(category.created_at)}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
              <button
                type="button"
                class="text-primary-600 hover:text-primary-900 mr-3 edit-category"
                data-category-id={category.id}
                data-category-name={category.name}
                data-category-slug={category.slug}
                data-category-description={category.description}
              >
                Edit
              </button>
              <button
                type="button"
                class="text-red-600 hover:text-red-900 delete-category"
                data-category-id={category.id}
                data-post-count={category.post_count}
              >
                Delete
              </button>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>

  <!-- Category Modal -->
  <div id="categoryModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
      <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
        <form id="categoryForm">
          <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4" id="modalTitle">New Category</h3>
            <input type="hidden" id="categoryId" />
            <div class="space-y-4">
              <div>
                <label for="categoryName" class="block text-sm font-medium text-gray-700">Name</label>
                <input
                  type="text"
                  id="categoryName"
                  name="name"
                  required
                  class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                />
              </div>
              <div>
                <label for="categorySlug" class="block text-sm font-medium text-gray-700">Slug</label>
                <input
                  type="text"
                  id="categorySlug"
                  name="slug"
                  required
                  class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                />
              </div>
              <div>
                <label for="categoryDescription" class="block text-sm font-medium text-gray-700">Description</label>
                <textarea
                  id="categoryDescription"
                  name="description"
                  rows="3"
                  class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                ></textarea>
              </div>
            </div>
          </div>
          <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button
              type="submit"
              class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary-600 text-base font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:ml-3 sm:w-auto sm:text-sm"
            >
              Save
            </button>
            <button
              type="button"
              class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
              id="cancelButton"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  const modal = document.getElementById('categoryModal');
  const form = document.getElementById('categoryForm') as HTMLFormElement;
  const modalTitle = document.getElementById('modalTitle');
  const categoryIdInput = document.getElementById('categoryId') as HTMLInputElement;
  const nameInput = document.getElementById('categoryName') as HTMLInputElement;
  const slugInput = document.getElementById('categorySlug') as HTMLInputElement;
  const descriptionInput = document.getElementById('categoryDescription') as HTMLTextAreaElement;

  // Show modal
  function showModal() {
    modal?.classList.remove('hidden');
  }

  // Hide modal
  function hideModal() {
    modal?.classList.add('hidden');
    form.reset();
    categoryIdInput.value = '';
  }

  // New category button
  document.getElementById('newCategoryButton')?.addEventListener('click', () => {
    modalTitle!.textContent = 'New Category';
    showModal();
  });

  // Cancel button
  document.getElementById('cancelButton')?.addEventListener('click', hideModal);

  // Edit category buttons
  document.querySelectorAll('.edit-category').forEach(button => {
    button.addEventListener('click', (e) => {
      const target = e.target as HTMLButtonElement;
      modalTitle!.textContent = 'Edit Category';
      categoryIdInput.value = target.dataset.categoryId || '';
      nameInput.value = target.dataset.categoryName || '';
      slugInput.value = target.dataset.categorySlug || '';
      descriptionInput.value = target.dataset.categoryDescription || '';
      showModal();
    });
  });

  // Delete category buttons
  document.querySelectorAll('.delete-category').forEach(button => {
    button.addEventListener('click', async (e) => {
      const target = e.target as HTMLButtonElement;
      const categoryId = target.dataset.categoryId;
      const postCount = parseInt(target.dataset.postCount || '0');

      if (postCount > 0) {
        alert(`Cannot delete category. It contains ${postCount} posts.`);
        return;
      }

      if (!confirm('Are you sure you want to delete this category?')) {
        return;
      }

      try {
        const response = await fetch(`/api/categories/${categoryId}`, {
          method: 'DELETE'
        });

        if (response.ok) {
          window.location.reload();
        } else {
          alert('Failed to delete category');
        }
      } catch (error) {
        console.error('Error deleting category:', error);
        alert('An error occurred');
      }
    });
  });

  // Form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const categoryId = categoryIdInput.value;
    const method = categoryId ? 'PUT' : 'POST';
    const url = categoryId ? `/api/categories/${categoryId}` : '/api/categories';

    try {
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(Object.fromEntries(formData))
      });

      if (response.ok) {
        window.location.reload();
      } else {
        alert('Failed to save category');
      }
    } catch (error) {
      console.error('Error saving category:', error);
      alert('An error occurred');
    }
  });

  // Auto-generate slug from name
  nameInput.addEventListener('input', () => {
    if (!slugInput.value) {
      slugInput.value = nameInput.value
        .toLowerCase()
        .replace(/\s+/g, '-')
        .replace(/[^\w-]+/g, '')
        .replace(/--+/g, '-')
        .replace(/^-+/, '')
        .replace(/-+$/, '');
    }
  });
</script>